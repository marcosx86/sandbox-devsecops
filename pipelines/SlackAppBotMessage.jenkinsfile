
// Pipeline para ambientes não-produtivos
// Autor: Marcos Silva Cunha <marcos21xx@gmail.com>
// Versão: 1.0
//
// Parâmetros:
// * environment - list: develop/testing/staging
// * slackWebhook - string: webhook para o canal do slack onde serão enviadas as notificações
// * skipNotifications - boolean: pular as notificações ao canal Slack mencionado

stage(name: 'Aprovação') {
    if (params.skipApproval) {
        sendSlackMessage("Job '${env.JOB_NAME}' -> Ignorada a etapa de aprovação para deploy do projeto!")
        echo 'Ignorada a etapa de aprovação para deploy do projeto!'
    } else {
        sendSlackMessage("Job '${env.JOB_NAME}' -> Aguardando aprovação para continuação do deploy do projeto!")
        input 'Aguardando aprovação para continuação do deploy do projeto!'
    }
}

node {
    stage(name: 'builder') {
        try {
            sendSlackMessage("Job '${env.JOB_NAME}' iniciado para o ambiente '${environment}'")
            deleteDir()

            echo 'Hello, world.'

            //throw new Exception("Erro genérico")

            cleanWs()
            sendSlackMessage("Job '${env.JOB_NAME}' finalizado para o ambiente '${environment}'")
        } catch (Exception e) {
            sendSlackMessage("Job '${env.JOB_NAME}' abortado com erro! Verificar em ${env.BUILD_URL}/console")
            throw e
        }
    }
}

def sendSlackMessage(message) {
    if (!params.skipNotifications && message != null && !"".equals(message.trim())) {
        httpRequest(
            url: params.slackWebhook,
            httpMode: 'POST',
            contentType: 'APPLICATION_JSON_UTF8',
            acceptType: 'APPLICATION_JSON_UTF8',
            requestBody: "{\"text\": \"${message}\"}",
            quiet: true
        )
    }
}
